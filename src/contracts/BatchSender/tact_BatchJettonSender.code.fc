#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_BatchJettonSender.headers.fc";
#include "tact_BatchJettonSender.stdlib.fc";
#include "tact_BatchJettonSender.storage.fc";

;;
;; Contract BatchJettonSender functions
;;

(slice, slice) $BatchJettonSender$_contract_init(slice $owner) impure inline_ref {
    var (($self'parent, $self'owner)) = (null(), null());
    $self'parent = __tact_context_get_sender();
    $self'owner = $owner;
    return ($self'parent, $self'owner);
}

((slice, slice), ()) $BatchJettonSender$_fun_SendJettonBatch((slice, slice) $self, (slice, cell) $data) impure inline_ref {
    var (($self'parent, $self'owner)) = $self;
    var (($data'contractAddress, $data'body)) = $data;
    throw_unless(40797, ( __tact_slice_eq_bits($self'parent, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($data'contractAddress, 50000000, 2, true, $data'body));
    return (($self'parent, $self'owner), ());
}

((slice, slice), int) $BatchJettonSender$_fun_balance((slice, slice) $self) impure inline_ref {
    var (($self'parent, $self'owner)) = $self;
    return (($self'parent, $self'owner), __tact_my_balance());
}

;;
;; Receivers of a Contract BatchJettonSender
;;

(((slice, slice)), ()) $BatchJettonSender$_internal_binary_InternalSendJetton((slice, slice) $self, (slice, cell) $msg) impure inline {
    var ($self'parent, $self'owner) = $self;
    var ($msg'contractAddress, $msg'body) = $msg;
    ($self'parent, $self'owner)~$BatchJettonSender$_fun_SendJettonBatch($InternalSendJetton$_tensor_cast(($msg'contractAddress, $msg'body)));
    return (($self'parent, $self'owner), ());
}

(((slice, slice)), ()) $BatchJettonSender$_internal_binary_ChangeContractOwner((slice, slice) $self, (slice) $msg) impure inline {
    var ($self'parent, $self'owner) = $self;
    var ($msg'newOwner) = $msg;
    $self'owner = $msg'newOwner;
    return (($self'parent, $self'owner), ());
}

((slice, slice), ()) $BatchJettonSender$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec((slice, slice) $self) impure inline {
    var ($self'parent, $self'owner) = $self;
    throw_unless(27921, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_bounce_value_mode($self'owner, true, ((__tact_my_balance() - $Context$_get_value(__tact_context_get())) - 10000000), (64 + 2)));
    return (($self'parent, $self'owner), ());
}

(((slice, slice)), ()) $BatchJettonSender$_internal_binary_Deploy((slice, slice) $self, (int) $deploy) impure inline {
    var ($self'parent, $self'owner) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'parent, $self'owner)~$BatchJettonSender$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'parent, $self'owner), ());
}

;;
;; Get methods of a Contract BatchJettonSender
;;

_ %balance() method_id(104128) {
    var self = $BatchJettonSender$_contract_load();
    var res = self~$BatchJettonSender$_fun_balance();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmS5W9LurwAYoWHSYJM22ubXgdfjQcMf8tGcxNymypCHc6";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract BatchJettonSender
;;

((slice, slice), int) $BatchJettonSender$_contract_router_internal((slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive InternalSendJetton message
    if (op == 1250200632) {
        var msg = in_msg~$InternalSendJetton$_load();
        self~$BatchJettonSender$_internal_binary_InternalSendJetton(msg);
        return (self, true);
    }
    
    ;; Receive ChangeContractOwner message
    if (op == 278038460) {
        var msg = in_msg~$ChangeContractOwner$_load();
        self~$BatchJettonSender$_internal_binary_ChangeContractOwner(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$BatchJettonSender$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "withdraw safe" message
        if (text_op == 0xbeb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec) {
            self~$BatchJettonSender$_internal_text_beb2935a82089b154d32f99c4377aa960aa115366cc2c602755e36b97f505cec();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $BatchJettonSender$_contract_load();
    
    ;; Handle operation
    int handled = self~$BatchJettonSender$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $BatchJettonSender$_contract_store(self);
}
