;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline {
    return (bounce, to, value, mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: ChangeContractOwner
;; Header: 0x109287bc
;; TLB: change_contract_owner#109287bc newOwner:address = ChangeContractOwner
;;

(slice, ((slice))) $ChangeContractOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 278038460);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'newOwner));
}

;;
;; Type: InternalSendJetton
;; Header: 0x4a848c38
;; TLB: internal_send_jetton#4a848c38 contractAddress:address body:^cell = InternalSendJetton
;;

builder $InternalSendJetton$_store(builder build_0, (slice, cell) v) inline {
    var (v'contractAddress, v'body) = v;
    build_0 = store_uint(build_0, 1250200632, 32);
    build_0 = __tact_store_address(build_0, v'contractAddress);
    build_0 = build_0.store_ref(v'body);
    return build_0;
}

cell $InternalSendJetton$_store_cell((slice, cell) v) inline {
    return $InternalSendJetton$_store(begin_cell(), v).end_cell();
}

((slice, cell)) $InternalSendJetton$_constructor_contractAddress_body(slice contractAddress, cell body) inline {
    return (contractAddress, body);
}

;;
;; Type: SetFee
;; Header: 0xc00a7dad
;; TLB: set_fee#c00a7dad fee:int257 = SetFee
;;

(slice, ((int))) $SetFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3221913005);
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'fee));
}

;;
;; Type: SendJetton
;; Header: 0x4f394a32
;; TLB: send_jetton#4f394a32 contractAddress:address body:dict<int, ^cell> length:int257 amount:int257 = SendJetton
;;

(slice, ((slice, cell, int, int))) $SendJetton$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1329154610);
    var v'contractAddress = sc_0~__tact_load_address();
    var v'body = sc_0~load_dict();
    var v'length = sc_0~load_int(257);
    var v'amount = sc_0~load_int(257);
    return (sc_0, (v'contractAddress, v'body, v'length, v'amount));
}

((slice, cell, int, int)) $SendJetton$_tensor_cast((slice, cell, int, int) v) asm "NOP";

;;
;; Type: SendTon
;; Header: 0x0424f31b
;; TLB: send_ton#0424f31b address:dict<int, address> amount:dict<int, int> comment:dict<int, ^cell> length:int257 = SendTon
;;

(slice, ((cell, cell, cell, int))) $SendTon$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 69530395);
    var v'address = sc_0~load_dict();
    var v'amount = sc_0~load_dict();
    var v'comment = sc_0~load_dict();
    var v'length = sc_0~load_int(257);
    return (sc_0, (v'address, v'amount, v'comment, v'length));
}

((cell, cell, cell, int)) $SendTon$_tensor_cast((cell, cell, cell, int) v) asm "NOP";

;;
;; Type: BatchJettonSender
;;

builder $BatchJettonSender$init$_store(builder build_0, (slice) v) inline {
    var (v'owner) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

(cell, cell) $BatchJettonSender$_init_child(cell sys', slice $owner) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: BatchJettonSender
    cell mine = __tact_dict_get_code(source, 48081);
    contracts = __tact_dict_set_code(contracts, 48081, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $BatchJettonSender$init$_store(b, ($owner));
    return (mine, b.end_cell());
}

;;
;; Type: BatchSender
;;

builder $BatchSender$_store(builder build_0, (slice, int) v) inline {
    var (v'deployer, v'fee) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_int(v'fee, 257);
    return build_0;
}

(slice, ((slice, int))) $BatchSender$_load(slice sc_0) inline {
    var v'deployer = sc_0~__tact_load_address();
    var v'fee = sc_0~load_int(257);
    return (sc_0, (v'deployer, v'fee));
}

(slice, int) $BatchSender$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$BatchSender$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $BatchSender$_contract_init();
    }
}

() $BatchSender$_contract_store((slice, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $BatchSender$_store(b, v);
    set_data(b.end_cell());
}